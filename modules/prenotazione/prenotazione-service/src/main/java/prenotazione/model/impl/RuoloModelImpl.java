/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package prenotazione.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import prenotazione.model.Ruolo;
import prenotazione.model.RuoloModel;

/**
 * The base model implementation for the Ruolo service. Represents a row in the &quot;ruoli&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RuoloModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RuoloImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RuoloImpl
 * @generated
 */
public class RuoloModelImpl extends BaseModelImpl<Ruolo> implements RuoloModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ruolo model instance should use the <code>Ruolo</code> interface instead.
	 */
	public static final String TABLE_NAME = "ruoli";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.INTEGER}, {"nome", Types.VARCHAR},
		{"descrizione", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("nome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descrizione", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ruoli (id_ INTEGER not null primary key,nome VARCHAR(75) null,descrizione VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table ruoli";

	public static final String ORDER_BY_JPQL = " ORDER BY ruolo.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY ruoli.id_ ASC";

	public static final String DATA_SOURCE = "prenotazioniDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public RuoloModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Ruolo.class;
	}

	@Override
	public String getModelClassName() {
		return Ruolo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Ruolo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Ruolo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Ruolo, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Ruolo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Ruolo, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Ruolo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Ruolo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Ruolo, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Ruolo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Ruolo, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Ruolo, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Ruolo, Object>>();

			attributeGetterFunctions.put("id", Ruolo::getId);
			attributeGetterFunctions.put("nome", Ruolo::getNome);
			attributeGetterFunctions.put("descrizione", Ruolo::getDescrizione);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Ruolo, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Ruolo, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Ruolo, ?>>();

			attributeSetterBiConsumers.put(
				"id", (BiConsumer<Ruolo, Integer>)Ruolo::setId);
			attributeSetterBiConsumers.put(
				"nome", (BiConsumer<Ruolo, String>)Ruolo::setNome);
			attributeSetterBiConsumers.put(
				"descrizione",
				(BiConsumer<Ruolo, String>)Ruolo::setDescrizione);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public int getId() {
		return _id;
	}

	@Override
	public void setId(int id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public String getNome() {
		if (_nome == null) {
			return "";
		}
		else {
			return _nome;
		}
	}

	@Override
	public void setNome(String nome) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nome = nome;
	}

	@Override
	public String getDescrizione() {
		if (_descrizione == null) {
			return "";
		}
		else {
			return _descrizione;
		}
	}

	@Override
	public void setDescrizione(String descrizione) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_descrizione = descrizione;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public Ruolo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Ruolo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RuoloImpl ruoloImpl = new RuoloImpl();

		ruoloImpl.setId(getId());
		ruoloImpl.setNome(getNome());
		ruoloImpl.setDescrizione(getDescrizione());

		ruoloImpl.resetOriginalValues();

		return ruoloImpl;
	}

	@Override
	public Ruolo cloneWithOriginalValues() {
		RuoloImpl ruoloImpl = new RuoloImpl();

		ruoloImpl.setId(this.<Integer>getColumnOriginalValue("id_"));
		ruoloImpl.setNome(this.<String>getColumnOriginalValue("nome"));
		ruoloImpl.setDescrizione(
			this.<String>getColumnOriginalValue("descrizione"));

		return ruoloImpl;
	}

	@Override
	public int compareTo(Ruolo ruolo) {
		int primaryKey = ruolo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Ruolo)) {
			return false;
		}

		Ruolo ruolo = (Ruolo)object;

		int primaryKey = ruolo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Ruolo> toCacheModel() {
		RuoloCacheModel ruoloCacheModel = new RuoloCacheModel();

		ruoloCacheModel.id = getId();

		ruoloCacheModel.nome = getNome();

		String nome = ruoloCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			ruoloCacheModel.nome = null;
		}

		ruoloCacheModel.descrizione = getDescrizione();

		String descrizione = ruoloCacheModel.descrizione;

		if ((descrizione != null) && (descrizione.length() == 0)) {
			ruoloCacheModel.descrizione = null;
		}

		return ruoloCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Ruolo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Ruolo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Ruolo, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Ruolo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Ruolo>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Ruolo.class, ModelWrapper.class);

	}

	private int _id;
	private String _nome;
	private String _descrizione;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Ruolo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Ruolo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("nome", _nome);
		_columnOriginalValues.put("descrizione", _descrizione);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("nome", 2L);

		columnBitmasks.put("descrizione", 4L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Ruolo _escapedModel;

}