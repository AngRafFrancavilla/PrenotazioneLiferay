/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package prenotazione.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import prenotazione.model.Postazione;
import prenotazione.model.PostazioneModel;

/**
 * The base model implementation for the Postazione service. Represents a row in the &quot;postazioni&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PostazioneModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PostazioneImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PostazioneImpl
 * @generated
 */
public class PostazioneModelImpl
	extends BaseModelImpl<Postazione> implements PostazioneModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a postazione model instance should use the <code>Postazione</code> interface instead.
	 */
	public static final String TABLE_NAME = "postazioni";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"stanza_id", Types.BIGINT},
		{"nome_postazione", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stanza_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nome_postazione", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table postazioni (id LONG not null primary key,stanza_id LONG,nome_postazione VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table postazioni";

	public static final String ORDER_BY_JPQL =
		" ORDER BY postazione.postazioneId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY postazioni.id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long POSTAZIONEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PostazioneModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _postazioneId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPostazioneId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _postazioneId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Postazione.class;
	}

	@Override
	public String getModelClassName() {
		return Postazione.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Postazione, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Postazione, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Postazione, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Postazione)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Postazione, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Postazione, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Postazione)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Postazione, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Postazione, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Postazione, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Postazione, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Postazione, Object>>();

			attributeGetterFunctions.put(
				"postazioneId", Postazione::getPostazioneId);
			attributeGetterFunctions.put("stanzaId", Postazione::getStanzaId);
			attributeGetterFunctions.put(
				"nomePostazione", Postazione::getNomePostazione);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Postazione, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Postazione, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Postazione, ?>>();

			attributeSetterBiConsumers.put(
				"postazioneId",
				(BiConsumer<Postazione, Long>)Postazione::setPostazioneId);
			attributeSetterBiConsumers.put(
				"stanzaId",
				(BiConsumer<Postazione, Long>)Postazione::setStanzaId);
			attributeSetterBiConsumers.put(
				"nomePostazione",
				(BiConsumer<Postazione, String>)Postazione::setNomePostazione);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public long getPostazioneId() {
		return _postazioneId;
	}

	@Override
	public void setPostazioneId(long postazioneId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postazioneId = postazioneId;
	}

	@Override
	public long getStanzaId() {
		return _stanzaId;
	}

	@Override
	public void setStanzaId(long stanzaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stanzaId = stanzaId;
	}

	@Override
	public String getNomePostazione() {
		if (_nomePostazione == null) {
			return "";
		}
		else {
			return _nomePostazione;
		}
	}

	@Override
	public void setNomePostazione(String nomePostazione) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nomePostazione = nomePostazione;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Postazione.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Postazione toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Postazione>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PostazioneImpl postazioneImpl = new PostazioneImpl();

		postazioneImpl.setPostazioneId(getPostazioneId());
		postazioneImpl.setStanzaId(getStanzaId());
		postazioneImpl.setNomePostazione(getNomePostazione());

		postazioneImpl.resetOriginalValues();

		return postazioneImpl;
	}

	@Override
	public Postazione cloneWithOriginalValues() {
		PostazioneImpl postazioneImpl = new PostazioneImpl();

		postazioneImpl.setPostazioneId(this.<Long>getColumnOriginalValue("id"));
		postazioneImpl.setStanzaId(
			this.<Long>getColumnOriginalValue("stanza_id"));
		postazioneImpl.setNomePostazione(
			this.<String>getColumnOriginalValue("nome_postazione"));

		return postazioneImpl;
	}

	@Override
	public int compareTo(Postazione postazione) {
		long primaryKey = postazione.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Postazione)) {
			return false;
		}

		Postazione postazione = (Postazione)object;

		long primaryKey = postazione.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Postazione> toCacheModel() {
		PostazioneCacheModel postazioneCacheModel = new PostazioneCacheModel();

		postazioneCacheModel.postazioneId = getPostazioneId();

		postazioneCacheModel.stanzaId = getStanzaId();

		postazioneCacheModel.nomePostazione = getNomePostazione();

		String nomePostazione = postazioneCacheModel.nomePostazione;

		if ((nomePostazione != null) && (nomePostazione.length() == 0)) {
			postazioneCacheModel.nomePostazione = null;
		}

		return postazioneCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Postazione, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Postazione, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Postazione, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Postazione)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Postazione>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Postazione.class, ModelWrapper.class);

	}

	private long _postazioneId;
	private long _stanzaId;
	private String _nomePostazione;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Postazione, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Postazione)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id", _postazioneId);
		_columnOriginalValues.put("stanza_id", _stanzaId);
		_columnOriginalValues.put("nome_postazione", _nomePostazione);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id", "postazioneId");
		attributeNames.put("stanza_id", "stanzaId");
		attributeNames.put("nome_postazione", "nomePostazione");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id", 1L);

		columnBitmasks.put("stanza_id", 2L);

		columnBitmasks.put("nome_postazione", 4L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Postazione _escapedModel;

}