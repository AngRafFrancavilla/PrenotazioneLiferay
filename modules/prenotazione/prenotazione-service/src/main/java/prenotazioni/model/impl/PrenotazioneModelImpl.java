/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package prenotazioni.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import prenotazioni.model.Prenotazione;
import prenotazioni.model.PrenotazioneModel;

/**
 * The base model implementation for the Prenotazione service. Represents a row in the &quot;prenotazioni&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PrenotazioneModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PrenotazioneImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PrenotazioneImpl
 * @generated
 */
@JSON(strict = true)
public class PrenotazioneModelImpl
	extends BaseModelImpl<Prenotazione> implements PrenotazioneModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a prenotazione model instance should use the <code>Prenotazione</code> interface instead.
	 */
	public static final String TABLE_NAME = "prenotazioni";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"data_", Types.TIMESTAMP},
		{"ora_inizio", Types.TIMESTAMP}, {"ora_fine", Types.TIMESTAMP},
		{"utenti_id", Types.BIGINT}, {"postazione_id", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("data_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ora_inizio", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ora_fine", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("utenti_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("postazione_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table prenotazioni (id_ LONG not null primary key,data_ DATE null,ora_inizio DATE null,ora_fine DATE null,utenti_id LONG,postazione_id LONG)";

	public static final String TABLE_SQL_DROP = "drop table prenotazioni";

	public static final String ORDER_BY_JPQL = " ORDER BY prenotazione.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY prenotazioni.id_ ASC";

	public static final String DATA_SOURCE = "prenotazioniDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "prenotazioniTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PrenotazioneModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Prenotazione.class;
	}

	@Override
	public String getModelClassName() {
		return Prenotazione.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Prenotazione, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Prenotazione, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Prenotazione, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Prenotazione)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Prenotazione, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Prenotazione, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Prenotazione)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Prenotazione, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Prenotazione, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Prenotazione, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Prenotazione, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<Prenotazione, Object>>();

			attributeGetterFunctions.put("id", Prenotazione::getId);
			attributeGetterFunctions.put("data", Prenotazione::getData);
			attributeGetterFunctions.put(
				"oraInizio", Prenotazione::getOraInizio);
			attributeGetterFunctions.put("oraFine", Prenotazione::getOraFine);
			attributeGetterFunctions.put("utentiId", Prenotazione::getUtentiId);
			attributeGetterFunctions.put(
				"postazioneId", Prenotazione::getPostazioneId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Prenotazione, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Prenotazione, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<Prenotazione, ?>>();

			attributeSetterBiConsumers.put(
				"id", (BiConsumer<Prenotazione, Long>)Prenotazione::setId);
			attributeSetterBiConsumers.put(
				"data", (BiConsumer<Prenotazione, Date>)Prenotazione::setData);
			attributeSetterBiConsumers.put(
				"oraInizio",
				(BiConsumer<Prenotazione, Date>)Prenotazione::setOraInizio);
			attributeSetterBiConsumers.put(
				"oraFine",
				(BiConsumer<Prenotazione, Date>)Prenotazione::setOraFine);
			attributeSetterBiConsumers.put(
				"utentiId",
				(BiConsumer<Prenotazione, Long>)Prenotazione::setUtentiId);
			attributeSetterBiConsumers.put(
				"postazioneId",
				(BiConsumer<Prenotazione, Long>)Prenotazione::setPostazioneId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public Date getData() {
		return _data;
	}

	@Override
	public void setData(Date data) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_data = data;
	}

	@JSON
	@Override
	public Date getOraInizio() {
		return _oraInizio;
	}

	@Override
	public void setOraInizio(Date oraInizio) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_oraInizio = oraInizio;
	}

	@JSON
	@Override
	public Date getOraFine() {
		return _oraFine;
	}

	@Override
	public void setOraFine(Date oraFine) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_oraFine = oraFine;
	}

	@JSON
	@Override
	public long getUtentiId() {
		return _utentiId;
	}

	@Override
	public void setUtentiId(long utentiId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_utentiId = utentiId;
	}

	@JSON
	@Override
	public long getPostazioneId() {
		return _postazioneId;
	}

	@Override
	public void setPostazioneId(long postazioneId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postazioneId = postazioneId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Prenotazione.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Prenotazione toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Prenotazione>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PrenotazioneImpl prenotazioneImpl = new PrenotazioneImpl();

		prenotazioneImpl.setId(getId());
		prenotazioneImpl.setData(getData());
		prenotazioneImpl.setOraInizio(getOraInizio());
		prenotazioneImpl.setOraFine(getOraFine());
		prenotazioneImpl.setUtentiId(getUtentiId());
		prenotazioneImpl.setPostazioneId(getPostazioneId());

		prenotazioneImpl.resetOriginalValues();

		return prenotazioneImpl;
	}

	@Override
	public Prenotazione cloneWithOriginalValues() {
		PrenotazioneImpl prenotazioneImpl = new PrenotazioneImpl();

		prenotazioneImpl.setId(this.<Long>getColumnOriginalValue("id_"));
		prenotazioneImpl.setData(this.<Date>getColumnOriginalValue("data_"));
		prenotazioneImpl.setOraInizio(
			this.<Date>getColumnOriginalValue("ora_inizio"));
		prenotazioneImpl.setOraFine(
			this.<Date>getColumnOriginalValue("ora_fine"));
		prenotazioneImpl.setUtentiId(
			this.<Long>getColumnOriginalValue("utenti_id"));
		prenotazioneImpl.setPostazioneId(
			this.<Long>getColumnOriginalValue("postazione_id"));

		return prenotazioneImpl;
	}

	@Override
	public int compareTo(Prenotazione prenotazione) {
		long primaryKey = prenotazione.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Prenotazione)) {
			return false;
		}

		Prenotazione prenotazione = (Prenotazione)object;

		long primaryKey = prenotazione.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Prenotazione> toCacheModel() {
		PrenotazioneCacheModel prenotazioneCacheModel =
			new PrenotazioneCacheModel();

		prenotazioneCacheModel.id = getId();

		Date data = getData();

		if (data != null) {
			prenotazioneCacheModel.data = data.getTime();
		}
		else {
			prenotazioneCacheModel.data = Long.MIN_VALUE;
		}

		Date oraInizio = getOraInizio();

		if (oraInizio != null) {
			prenotazioneCacheModel.oraInizio = oraInizio.getTime();
		}
		else {
			prenotazioneCacheModel.oraInizio = Long.MIN_VALUE;
		}

		Date oraFine = getOraFine();

		if (oraFine != null) {
			prenotazioneCacheModel.oraFine = oraFine.getTime();
		}
		else {
			prenotazioneCacheModel.oraFine = Long.MIN_VALUE;
		}

		prenotazioneCacheModel.utentiId = getUtentiId();

		prenotazioneCacheModel.postazioneId = getPostazioneId();

		return prenotazioneCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Prenotazione, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Prenotazione, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Prenotazione, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Prenotazione)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Prenotazione>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Prenotazione.class, ModelWrapper.class);

	}

	private long _id;
	private Date _data;
	private Date _oraInizio;
	private Date _oraFine;
	private long _utentiId;
	private long _postazioneId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Prenotazione, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Prenotazione)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("data_", _data);
		_columnOriginalValues.put("ora_inizio", _oraInizio);
		_columnOriginalValues.put("ora_fine", _oraFine);
		_columnOriginalValues.put("utenti_id", _utentiId);
		_columnOriginalValues.put("postazione_id", _postazioneId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");
		attributeNames.put("data_", "data");
		attributeNames.put("ora_inizio", "oraInizio");
		attributeNames.put("ora_fine", "oraFine");
		attributeNames.put("utenti_id", "utentiId");
		attributeNames.put("postazione_id", "postazioneId");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("data_", 2L);

		columnBitmasks.put("ora_inizio", 4L);

		columnBitmasks.put("ora_fine", 8L);

		columnBitmasks.put("utenti_id", 16L);

		columnBitmasks.put("postazione_id", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Prenotazione _escapedModel;

}